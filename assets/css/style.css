/*
! tailwindcss v3.3.5 | MIT License | https://tailwindcss.com
*/

/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box;
  /* 1 */
  border-width: 0;
  /* 2 */
  border-style: solid;
  /* 2 */
  border-color: #e5e7eb;
  /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
*/

html {
  line-height: 1.5;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -moz-tab-size: 4;
  /* 3 */
  -o-tab-size: 4;
     tab-size: 4;
  /* 3 */
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  /* 4 */
  font-feature-settings: normal;
  /* 5 */
  font-variation-settings: normal;
  /* 6 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0;
  /* 1 */
  line-height: inherit;
  /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0;
  /* 1 */
  color: inherit;
  /* 2 */
  border-top-width: 1px;
  /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font family by default.
2. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0;
  /* 1 */
  border-color: inherit;
  /* 2 */
  border-collapse: collapse;
  /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-feature-settings: inherit;
  /* 1 */
  font-variation-settings: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  font-weight: inherit;
  /* 1 */
  line-height: inherit;
  /* 1 */
  color: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
  padding: 0;
  /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
[type='button'],
[type='reset'],
[type='submit'] {
  -webkit-appearance: button;
  /* 1 */
  background-color: transparent;
  /* 2 */
  background-image: none;
  /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Reset default styling for dialogs.
*/

dialog {
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

input::placeholder,
textarea::placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/

:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block;
  /* 1 */
  vertical-align: middle;
  /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */

[hidden] {
  display: none;
}

/* default light theme: */

:root,
  .theme-light {
  /* use rgb because opacity with alpha channel can be easily added with r g b / a */
  /* colors mostly used with text/border */
  --color-text-regular: 61 68 73;
  /*mild black*/
  --color-text-muted: 127 136 143;
  /*gray */
  /*--color-text-inverted: 245 106 106; /*light red*/
  --color-text-inverted: 251 73 52;
  /*gruvbox light red(not sure if this or original light theme red)*/
  /*--color-text-inverted: 98 212 229; /*light blue*/
  /*--color-text-inverted: 50 205 50; /*light green*/
  --color-text-accent: var(--color-text-inverted);
  --color-text-ringgray: 209 213 219;
  /* gray-300 */
  /* colors mostly used with bg to fill */
  --color-bg-primary: 255 255 255;
  /* white */
  --color-bg-secondary: 241 245 249;
  /* light gray */
  --color-bg-tertiary: 226 232 240;
  /* currently no used, but maybe needed */
}

/* default dark theme: */

.theme-dark {
  /* colors mostly used with text/border */
  --color-text-regular: 200 200 200;
  /*grayish white*/
  --color-text-muted: 127 136 143;
  /*gray (seems fine same as light)*/
  --color-text-inverted: 251 73 52;
  /*gruvbox light red(not sure if this or original light theme red)*/
  /*--color-text-inverted: 98 212 229; /*light blue*/
  /*--color-text-inverted: 50 205 50; /*light green*/
  --color-text-accent: var(--color-text-inverted);
  --color-text-ringgray: 40 40 40;
  /* gray-800 */
  /* colors mostly used with bg to fill */
  --color-bg-primary: 40 40 40;
  /*gruvbox black*/
  --color-bg-secondary: 32 32 32;
  /*darker gruvbox black*/
  --color-bg-tertiary: 24 24 24;
  /* currently no used, but maybe needed */
}

*, ::before, ::after {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
}

::backdrop {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
}

.container {
  width: 100%;
}

@media (min-width: 640px) {
  .container {
    max-width: 640px;
  }
}

@media (min-width: 768px) {
  .container {
    max-width: 768px;
  }
}

@media (min-width: 1024px) {
  .container {
    max-width: 1024px;
  }
}

@media (min-width: 1280px) {
  .container {
    max-width: 1280px;
  }
}

@media (min-width: 1536px) {
  .container {
    max-width: 1536px;
  }
}

.prose {
  color: var(--tw-prose-body);
  max-width: 65ch;
}

.prose :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
}

.prose :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-lead);
  font-size: 1.25em;
  line-height: 1.6;
  margin-top: 1.2em;
  margin-bottom: 1.2em;
}

.prose :where(a):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-links);
  text-decoration: underline;
  font-weight: 500;
}

.prose :where(strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-bold);
  font-weight: 600;
}

.prose :where(a strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(blockquote strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(thead th strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: decimal;
  margin-top: 1.25em;
  margin-bottom: 1.25em;
  padding-left: 1.625em;
}

.prose :where(ol[type="A"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: upper-alpha;
}

.prose :where(ol[type="a"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: lower-alpha;
}

.prose :where(ol[type="A" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: upper-alpha;
}

.prose :where(ol[type="a" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: lower-alpha;
}

.prose :where(ol[type="I"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: upper-roman;
}

.prose :where(ol[type="i"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: lower-roman;
}

.prose :where(ol[type="I" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: upper-roman;
}

.prose :where(ol[type="i" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: lower-roman;
}

.prose :where(ol[type="1"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: decimal;
}

.prose :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: disc;
  margin-top: 1.25em;
  margin-bottom: 1.25em;
  padding-left: 1.625em;
}

.prose :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
  font-weight: 400;
  color: var(--tw-prose-counters);
}

.prose :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
  color: var(--tw-prose-bullets);
}

.prose :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  margin-top: 1.25em;
}

.prose :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-color: var(--tw-prose-hr);
  border-top-width: 1px;
  margin-top: 3em;
  margin-bottom: 3em;
}

.prose :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 500;
  font-style: italic;
  color: var(--tw-prose-quotes);
  border-left-width: 0.25rem;
  border-left-color: var(--tw-prose-quote-borders);
  quotes: "\201C""\201D""\2018""\2019";
  margin-top: 1.6em;
  margin-bottom: 1.6em;
  padding-left: 1em;
}

.prose :where(blockquote p:first-of-type):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
  content: open-quote;
}

.prose :where(blockquote p:last-of-type):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
  content: close-quote;
}

.prose :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 800;
  font-size: 2.25em;
  margin-top: 0;
  margin-bottom: 0.8888889em;
  line-height: 1.1111111;
}

.prose :where(h1 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 900;
  color: inherit;
}

.prose :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 700;
  font-size: 1.5em;
  margin-top: 2em;
  margin-bottom: 1em;
  line-height: 1.3333333;
}

.prose :where(h2 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 800;
  color: inherit;
}

.prose :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  font-size: 1.25em;
  margin-top: 1.6em;
  margin-bottom: 0.6em;
  line-height: 1.6;
}

.prose :where(h3 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 700;
  color: inherit;
}

.prose :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  margin-top: 1.5em;
  margin-bottom: 0.5em;
  line-height: 1.5;
}

.prose :where(h4 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 700;
  color: inherit;
}

.prose :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  display: block;
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 500;
  font-family: inherit;
  color: var(--tw-prose-kbd);
  box-shadow: 0 0 0 1px rgb(var(--tw-prose-kbd-shadows) / 10%), 0 3px 0 rgb(var(--tw-prose-kbd-shadows) / 10%);
  font-size: 0.875em;
  border-radius: 0.3125rem;
  padding-top: 0.1875em;
  padding-right: 0.375em;
  padding-bottom: 0.1875em;
  padding-left: 0.375em;
}

.prose :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-code);
  font-weight: 600;
  font-size: 0.875em;
}

.prose :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
  content: "`";
}

.prose :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
  content: "`";
}

.prose :where(a code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(h1 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
  font-size: 0.875em;
}

.prose :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
  font-size: 0.9em;
}

.prose :where(h4 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(blockquote code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(thead th code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-pre-code);
  background-color: var(--tw-prose-pre-bg);
  overflow-x: auto;
  font-weight: 400;
  font-size: 0.875em;
  line-height: 1.7142857;
  margin-top: 1.7142857em;
  margin-bottom: 1.7142857em;
  border-radius: 0.375rem;
  padding-top: 0.8571429em;
  padding-right: 1.1428571em;
  padding-bottom: 0.8571429em;
  padding-left: 1.1428571em;
}

.prose :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  background-color: transparent;
  border-width: 0;
  border-radius: 0;
  padding: 0;
  font-weight: inherit;
  color: inherit;
  font-size: inherit;
  font-family: inherit;
  line-height: inherit;
}

.prose :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
  content: none;
}

.prose :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
  content: none;
}

.prose :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  width: 100%;
  table-layout: auto;
  text-align: left;
  margin-top: 2em;
  margin-bottom: 2em;
  font-size: 0.875em;
  line-height: 1.7142857;
}

.prose :where(thead):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-th-borders);
}

.prose :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  vertical-align: bottom;
  padding-right: 0.5714286em;
  padding-bottom: 0.5714286em;
  padding-left: 0.5714286em;
}

.prose :where(tbody tr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-td-borders);
}

.prose :where(tbody tr:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-bottom-width: 0;
}

.prose :where(tbody td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  vertical-align: baseline;
}

.prose :where(tfoot):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-top-width: 1px;
  border-top-color: var(--tw-prose-th-borders);
}

.prose :where(tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  vertical-align: top;
}

.prose :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
  margin-bottom: 0;
}

.prose :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-captions);
  font-size: 0.875em;
  line-height: 1.4285714;
  margin-top: 0.8571429em;
}

.prose {
  --tw-prose-body: #374151;
  --tw-prose-headings: #111827;
  --tw-prose-lead: #4b5563;
  --tw-prose-links: #111827;
  --tw-prose-bold: #111827;
  --tw-prose-counters: #6b7280;
  --tw-prose-bullets: #d1d5db;
  --tw-prose-hr: #e5e7eb;
  --tw-prose-quotes: #111827;
  --tw-prose-quote-borders: #e5e7eb;
  --tw-prose-captions: #6b7280;
  --tw-prose-kbd: #111827;
  --tw-prose-kbd-shadows: 17 24 39;
  --tw-prose-code: #111827;
  --tw-prose-pre-code: #e5e7eb;
  --tw-prose-pre-bg: #1f2937;
  --tw-prose-th-borders: #d1d5db;
  --tw-prose-td-borders: #e5e7eb;
  --tw-prose-invert-body: #d1d5db;
  --tw-prose-invert-headings: #fff;
  --tw-prose-invert-lead: #9ca3af;
  --tw-prose-invert-links: #fff;
  --tw-prose-invert-bold: #fff;
  --tw-prose-invert-counters: #9ca3af;
  --tw-prose-invert-bullets: #4b5563;
  --tw-prose-invert-hr: #374151;
  --tw-prose-invert-quotes: #f3f4f6;
  --tw-prose-invert-quote-borders: #374151;
  --tw-prose-invert-captions: #9ca3af;
  --tw-prose-invert-kbd: #fff;
  --tw-prose-invert-kbd-shadows: 255 255 255;
  --tw-prose-invert-code: #fff;
  --tw-prose-invert-pre-code: #d1d5db;
  --tw-prose-invert-pre-bg: rgb(0 0 0 / 50%);
  --tw-prose-invert-th-borders: #4b5563;
  --tw-prose-invert-td-borders: #374151;
  font-size: 1rem;
  line-height: 1.75;
}

.prose :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
  margin-bottom: 0;
}

.prose :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}

.prose :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-left: 0.375em;
}

.prose :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-left: 0.375em;
}

.prose :where(.prose > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.75em;
  margin-bottom: 0.75em;
}

.prose :where(.prose > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.25em;
}

.prose :where(.prose > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-bottom: 1.25em;
}

.prose :where(.prose > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.25em;
}

.prose :where(.prose > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-bottom: 1.25em;
}

.prose :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.75em;
  margin-bottom: 0.75em;
}

.prose :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
}

.prose :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.5em;
  padding-left: 1.625em;
}

.prose :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.prose :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.prose :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.prose :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.prose :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-left: 0;
}

.prose :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-right: 0;
}

.prose :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-top: 0.5714286em;
  padding-right: 0.5714286em;
  padding-bottom: 0.5714286em;
  padding-left: 0.5714286em;
}

.prose :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-left: 0;
}

.prose :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-right: 0;
}

.prose :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(.prose > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.prose :where(.prose > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-bottom: 0;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.fixed {
  position: fixed;
}

.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.inset-y-0 {
  top: 0px;
  bottom: 0px;
}

.-right-\[3\.2rem\] {
  right: -3.2rem;
}

.-right-\[4\.1rem\] {
  right: -4.1rem;
}

.left-0 {
  left: 0px;
}

.top-\[0\.95rem\] {
  top: 0.95rem;
}

.top-\[1\.7rem\] {
  top: 1.7rem;
}

.z-10 {
  z-index: 10;
}

.order-last {
  order: 9999;
}

.m-0 {
  margin: 0px;
}

.mx-0 {
  margin-left: 0px;
  margin-right: 0px;
}

.mx-\[1\.5rem\] {
  margin-left: 1.5rem;
  margin-right: 1.5rem;
}

.mx-\[1\.75rem\] {
  margin-left: 1.75rem;
  margin-right: 1.75rem;
}

.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

.my-2 {
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
}

.my-8 {
  margin-top: 2rem;
  margin-bottom: 2rem;
}

.mb-12 {
  margin-bottom: 3rem;
}

.mb-16 {
  margin-bottom: 4rem;
}

.mb-4 {
  margin-bottom: 1rem;
}

.mb-8 {
  margin-bottom: 2rem;
}

.ml-0 {
  margin-left: 0px;
}

.ml-3 {
  margin-left: 0.75rem;
}

.mr-4 {
  margin-right: 1rem;
}

.mr-7 {
  margin-right: 1.75rem;
}

.mt-12 {
  margin-top: 3rem;
}

.mt-14 {
  margin-top: 3.5rem;
}

.mt-16 {
  margin-top: 4rem;
}

.mt-4 {
  margin-top: 1rem;
}

.mt-6 {
  margin-top: 1.5rem;
}

.mt-8 {
  margin-top: 2rem;
}

.mt-9 {
  margin-top: 2.25rem;
}

.mt-\[3rem\] {
  margin-top: 3rem;
}

.block {
  display: block;
}

.inline-block {
  display: inline-block;
}

.flex {
  display: flex;
}

.inline-flex {
  display: inline-flex;
}

.grid {
  display: grid;
}

.hidden {
  display: none;
}

.h-32 {
  height: 8rem;
}

.h-4 {
  height: 1rem;
}

.h-5 {
  height: 1.25rem;
}

.h-6 {
  height: 1.5rem;
}

.h-7 {
  height: 1.75rem;
}

.h-8 {
  height: 2rem;
}

.h-9 {
  height: 2.25rem;
}

.h-screen {
  height: 100vh;
}

.w-0 {
  width: 0px;
}

.w-4 {
  width: 1rem;
}

.w-5 {
  width: 1.25rem;
}

.w-6 {
  width: 1.5rem;
}

.w-7 {
  width: 1.75rem;
}

.w-8 {
  width: 2rem;
}

.w-\[18\.5rem\] {
  width: 18.5rem;
}

.w-\[7rem\] {
  width: 7rem;
}

.w-full {
  width: 100%;
}

.w-min {
  width: -moz-min-content;
  width: min-content;
}

.min-w-min {
  min-width: -moz-min-content;
  min-width: min-content;
}

.max-w-\[19rem\] {
  max-width: 19rem;
}

.max-w-\[48rem\] {
  max-width: 48rem;
}

.max-w-none {
  max-width: none;
}

.grow {
  flex-grow: 1;
}

.-translate-x-full {
  --tw-translate-x: -100%;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.translate-x-0 {
  --tw-translate-x: 0px;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.transform {
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.list-disc {
  list-style-type: disc;
}

.grid-cols-1 {
  grid-template-columns: repeat(1, minmax(0, 1fr));
}

.grid-cols-\[auto_1fr\] {
  grid-template-columns: auto 1fr;
}

.flex-row {
  flex-direction: row;
}

.flex-col {
  flex-direction: column;
}

.flex-wrap {
  flex-wrap: wrap;
}

.items-end {
  align-items: flex-end;
}

.items-center {
  align-items: center;
}

.justify-start {
  justify-content: flex-start;
}

.justify-between {
  justify-content: space-between;
}

.gap-2 {
  gap: 0.5rem;
}

.gap-4 {
  gap: 1rem;
}

.gap-x-2 {
  -moz-column-gap: 0.5rem;
       column-gap: 0.5rem;
}

.gap-x-4 {
  -moz-column-gap: 1rem;
       column-gap: 1rem;
}

.gap-y-2 {
  row-gap: 0.5rem;
}

.space-x-1 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(0.25rem * var(--tw-space-x-reverse));
  margin-left: calc(0.25rem * calc(1 - var(--tw-space-x-reverse)));
}

.space-x-1\.5 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(0.375rem * var(--tw-space-x-reverse));
  margin-left: calc(0.375rem * calc(1 - var(--tw-space-x-reverse)));
}

.space-x-2 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(0.5rem * var(--tw-space-x-reverse));
  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));
}

.space-y-1 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(0.25rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(0.25rem * var(--tw-space-y-reverse));
}

.place-self-start {
  place-self: start;
}

.place-self-end {
  place-self: end;
}

.self-end {
  align-self: flex-end;
}

.overflow-hidden {
  overflow: hidden;
}

.overflow-y-auto {
  overflow-y: auto;
}

.whitespace-nowrap {
  white-space: nowrap;
}

.rounded {
  border-radius: 0.25rem;
}

.border-b {
  border-bottom-width: 1px;
}

.border-b-2 {
  border-bottom-width: 2px;
}

.border-b-4 {
  border-bottom-width: 4px;
}

.border-b-\[3px\] {
  border-bottom-width: 3px;
}

.border-t-\[1px\] {
  border-top-width: 1px;
}

.border-dashed {
  border-style: dashed;
}

.border-hidden {
  border-style: hidden;
}

.border-accent {
  --tw-border-opacity: 1;
  border-color: rgb(var(--color-text-accent) / var(--tw-border-opacity));
}

.border-muted {
  --tw-border-opacity: 1;
  border-color: rgb(var(--color-text-muted) / var(--tw-border-opacity));
}

.border-ringgray {
  --tw-border-opacity: 1;
  border-color: rgb(var(--color-text-ringgray) / var(--tw-border-opacity));
}

.border-tertiary {
  --tw-border-opacity: 1;
  border-color: rgb(var(--color-bg-tertiary) / var(--tw-border-opacity));
}

.border-opacity-50 {
  --tw-border-opacity: 0.5;
}

.bg-primary {
  --tw-bg-opacity: 1;
  background-color: rgb(var(--color-bg-primary) / var(--tw-bg-opacity));
}

.bg-secondary {
  --tw-bg-opacity: 1;
  background-color: rgb(var(--color-bg-secondary) / var(--tw-bg-opacity));
}

.bg-tertiary {
  --tw-bg-opacity: 1;
  background-color: rgb(var(--color-bg-tertiary) / var(--tw-bg-opacity));
}

.bg-opacity-40 {
  --tw-bg-opacity: 0.4;
}

.bg-opacity-80 {
  --tw-bg-opacity: 0.8;
}

.fill-current {
  fill: currentColor;
}

.fill-muted {
  fill: rgb(var(--color-text-muted) / 1);
}

.fill-secondary {
  fill: rgb(var(--color-bg-secondary) / 1);
}

.fill-tertiary {
  fill: rgb(var(--color-bg-tertiary) / 1);
}

.stroke-accent {
  stroke: rgb(var(--color-text-accent) / 1);
}

.stroke-muted {
  stroke: rgb(var(--color-text-muted) / 1);
}

.stroke-2 {
  stroke-width: 2;
}

.px-4 {
  padding-left: 1rem;
  padding-right: 1rem;
}

.py-2 {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

.py-3 {
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
}

.py-5 {
  padding-top: 1.25rem;
  padding-bottom: 1.25rem;
}

.py-8 {
  padding-top: 2rem;
  padding-bottom: 2rem;
}

.pb-2 {
  padding-bottom: 0.5rem;
}

.pb-3 {
  padding-bottom: 0.75rem;
}

.pb-4 {
  padding-bottom: 1rem;
}

.pb-8 {
  padding-bottom: 2rem;
}

.pl-2 {
  padding-left: 0.5rem;
}

.pl-9 {
  padding-left: 2.25rem;
}

.pr-2 {
  padding-right: 0.5rem;
}

.pr-3 {
  padding-right: 0.75rem;
}

.pr-4 {
  padding-right: 1rem;
}

.pt-16 {
  padding-top: 4rem;
}

.pt-5 {
  padding-top: 1.25rem;
}

.text-right {
  text-align: right;
}

.align-top {
  vertical-align: top;
}

.align-text-bottom {
  vertical-align: text-bottom;
}

.text-base {
  font-size: 1rem;
  line-height: 1.5rem;
}

.text-lg {
  font-size: 1.125rem;
  line-height: 1.75rem;
}

.text-xl {
  font-size: 1.25rem;
  line-height: 1.75rem;
}

.text-xs {
  font-size: 0.75rem;
  line-height: 1rem;
}

.font-bold {
  font-weight: 700;
}

.font-thin {
  font-weight: 100;
}

.uppercase {
  text-transform: uppercase;
}

.leading-relaxed {
  line-height: 1.625;
}

.text-accent {
  --tw-text-opacity: 1;
  color: rgb(var(--color-text-accent) / var(--tw-text-opacity));
}

.text-muted {
  --tw-text-opacity: 1;
  color: rgb(var(--color-text-muted) / var(--tw-text-opacity));
}

.text-regular {
  --tw-text-opacity: 1;
  color: rgb(var(--color-text-regular) / var(--tw-text-opacity));
}

.underline {
  text-decoration-line: underline;
}

.decoration-1 {
  text-decoration-thickness: 1px;
}

.shadow-sm {
  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.ring-1 {
  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.ring-ringgray {
  --tw-ring-opacity: 1;
  --tw-ring-color: rgb(var(--color-text-ringgray) / var(--tw-ring-opacity));
}

.filter {
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.transition {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.duration-200 {
  transition-duration: 200ms;
}

.duration-300 {
  transition-duration: 300ms;
}

.ease-in-out {
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

/* TODO add two seperate themes for light/dark, this theme looks okaish
 * with both for now */

/* hugo/chroma code block theme: `hugo gen chromastyles --style=onedark >> assets/css/base.css`  */

/* Background */

.bg {
  color: #abb2bf;
  background-color: #282c34;
}

/* PreWrapper */

.chroma {
  color: #abb2bf;
  background-color: #282c34;
}

/* Other */

.chroma .x {
}

/* Error */

.chroma .err {
}

/* CodeLine */

.chroma .cl {
}

/* LineLink */

.chroma .lnlinks {
  outline: none;
  text-decoration: none;
  color: inherit
}

/* LineTableTD */

.chroma .lntd {
  vertical-align: top;
  padding: 0;
  margin: 0;
  border: 0;
}

/* LineTable */

.chroma .lntable {
  border-spacing: 0;
  padding: 0;
  margin: 0;
  border: 0;
}

/* LineHighlight */

.chroma .hl {
  background-color: #3d4148
}

/* LineNumbersTable */

.chroma .lnt {
  white-space: pre;
  -webkit-user-select: none;
  -moz-user-select: none;
       user-select: none;
  margin-right: 0.4em;
  padding: 0 0.4em 0 0.4em;
  color: #55595f
}

/* LineNumbers */

.chroma .ln {
  white-space: pre;
  -webkit-user-select: none;
  -moz-user-select: none;
       user-select: none;
  margin-right: 0.4em;
  padding: 0 0.4em 0 0.4em;
  color: #55595f
}

/* Line */

.chroma .line {
  display: flex;
}

/* Keyword */

.chroma .k {
  color: #c678dd
}

/* KeywordConstant */

.chroma .kc {
  color: #e5c07b
}

/* KeywordDeclaration */

.chroma .kd {
  color: #c678dd
}

/* KeywordNamespace */

.chroma .kn {
  color: #c678dd
}

/* KeywordPseudo */

.chroma .kp {
  color: #c678dd
}

/* KeywordReserved */

.chroma .kr {
  color: #c678dd
}

/* KeywordType */

.chroma .kt {
  color: #e5c07b
}

/* Name */

.chroma .n {
  color: #e06c75
}

/* NameAttribute */

.chroma .na {
  color: #e06c75
}

/* NameBuiltin */

.chroma .nb {
  color: #e5c07b
}

/* NameBuiltinPseudo */

.chroma .bp {
  color: #e06c75
}

/* NameClass */

.chroma .nc {
  color: #e5c07b
}

/* NameConstant */

.chroma .no {
  color: #e06c75
}

/* NameDecorator */

.chroma .nd {
  color: #61afef
}

/* NameEntity */

.chroma .ni {
  color: #e06c75
}

/* NameException */

.chroma .ne {
  color: #e06c75
}

/* NameFunction */

.chroma .nf {
  color: #61afef;
  font-weight: bold
}

/* NameFunctionMagic */

.chroma .fm {
  color: #56b6c2;
  font-weight: bold
}

/* NameLabel */

.chroma .nl {
  color: #e06c75
}

/* NameNamespace */

.chroma .nn {
  color: #e06c75
}

/* NameOther */

.chroma .nx {
  color: #e06c75
}

/* NameProperty */

.chroma .py {
  color: #e06c75
}

/* NameTag */

.chroma .nt {
  color: #e06c75
}

/* NameVariable */

.chroma .nv {
  color: #e06c75
}

/* NameVariableClass */

.chroma .vc {
  color: #e06c75
}

/* NameVariableGlobal */

.chroma .vg {
  color: #e06c75
}

/* NameVariableInstance */

.chroma .vi {
  color: #e06c75
}

/* NameVariableMagic */

.chroma .vm {
  color: #e06c75
}

/* Literal */

.chroma .l {
}

/* LiteralDate */

.chroma .ld {
}

/* LiteralString */

.chroma .s {
  color: #98c379
}

/* LiteralStringAffix */

.chroma .sa {
  color: #98c379
}

/* LiteralStringBacktick */

.chroma .sb {
  color: #98c379
}

/* LiteralStringChar */

.chroma .sc {
  color: #98c379
}

/* LiteralStringDelimiter */

.chroma .dl {
  color: #98c379
}

/* LiteralStringDoc */

.chroma .sd {
  color: #98c379
}

/* LiteralStringDouble */

.chroma .s2 {
  color: #98c379
}

/* LiteralStringEscape */

.chroma .se {
  color: #98c379
}

/* LiteralStringHeredoc */

.chroma .sh {
  color: #98c379
}

/* LiteralStringInterpol */

.chroma .si {
  color: #98c379
}

/* LiteralStringOther */

.chroma .sx {
  color: #98c379
}

/* LiteralStringRegex */

.chroma .sr {
  color: #98c379
}

/* LiteralStringSingle */

.chroma .s1 {
  color: #98c379
}

/* LiteralStringSymbol */

.chroma .ss {
  color: #98c379
}

/* LiteralNumber */

.chroma .m {
  color: #d19a66
}

/* LiteralNumberBin */

.chroma .mb {
  color: #d19a66
}

/* LiteralNumberFloat */

.chroma .mf {
  color: #d19a66
}

/* LiteralNumberHex */

.chroma .mh {
  color: #d19a66
}

/* LiteralNumberInteger */

.chroma .mi {
  color: #d19a66
}

/* LiteralNumberIntegerLong */

.chroma .il {
  color: #d19a66
}

/* LiteralNumberOct */

.chroma .mo {
  color: #d19a66
}

/* Operator */

.chroma .o {
  color: #56b6c2
}

/* OperatorWord */

.chroma .ow {
  color: #56b6c2
}

/* Punctuation */

.chroma .p {
}

/* Comment */

.chroma .c {
  color: #7f848e
}

/* CommentHashbang */

.chroma .ch {
  color: #7f848e
}

/* CommentMultiline */

.chroma .cm {
  color: #7f848e
}

/* CommentSingle */

.chroma .c1 {
  color: #7f848e
}

/* CommentSpecial */

.chroma .cs {
  color: #7f848e
}

/* CommentPreproc */

.chroma .cp {
  color: #7f848e
}

/* CommentPreprocFile */

.chroma .cpf {
  color: #7f848e
}

/* Generic */

.chroma .g {
}

/* GenericDeleted */

.chroma .gd {
  color: #e06c75
}

/* GenericEmph */

.chroma .ge {
}

/* GenericError */

.chroma .gr {
}

/* GenericHeading */

.chroma .gh {
}

/* GenericInserted */

.chroma .gi {
  color: #98c379;
  font-weight: bold
}

/* GenericOutput */

.chroma .go {
}

/* GenericPrompt */

.chroma .gp {
}

/* GenericStrong */

.chroma .gs {
}

/* GenericSubheading */

.chroma .gu {
}

/* GenericTraceback */

.chroma .gt {
}

/* GenericUnderline */

.chroma .gl {
}

/* TextWhitespace */

.chroma .w {
}

.marker\:text-muted *::marker {
  color: rgb(var(--color-text-muted) );
}

.marker\:text-muted::marker {
  color: rgb(var(--color-text-muted) );
}

.placeholder\:italic::-moz-placeholder {
  font-style: italic;
}

.placeholder\:italic::placeholder {
  font-style: italic;
}

.before\:content-\[\'\<\'\]::before {
  --tw-content: '<';
  content: var(--tw-content);
}

.after\:absolute::after {
  content: var(--tw-content);
  position: absolute;
}

.after\:right-0::after {
  content: var(--tw-content);
  right: 0px;
}

.after\:top-0::after {
  content: var(--tw-content);
  top: 0px;
}

.after\:hidden::after {
  content: var(--tw-content);
  display: none;
}

.after\:border-l-\[1\.5rem\]::after {
  content: var(--tw-content);
  border-left-width: 1.5rem;
}

.after\:border-t-\[1\.5rem\]::after {
  content: var(--tw-content);
  border-top-width: 1.5rem;
}

.after\:border-l-accent::after {
  content: var(--tw-content);
  --tw-border-opacity: 1;
  border-left-color: rgb(var(--color-text-accent) / var(--tw-border-opacity));
}

.after\:border-t-transparent::after {
  content: var(--tw-content);
  border-top-color: transparent;
}

.after\:bg-primary::after {
  content: var(--tw-content);
  --tw-bg-opacity: 1;
  background-color: rgb(var(--color-bg-primary) / var(--tw-bg-opacity));
}

.after\:content-\[\'\>\'\]::after {
  --tw-content: '>';
  content: var(--tw-content);
}

.hover\:bg-tertiary:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(var(--color-bg-tertiary) / var(--tw-bg-opacity));
}

.hover\:fill-accent:hover {
  fill: rgb(var(--color-text-accent) / 1);
}

.hover\:text-accent:hover {
  --tw-text-opacity: 1;
  color: rgb(var(--color-text-accent) / var(--tw-text-opacity));
}

.hover\:underline:hover {
  text-decoration-line: underline;
}

.hover\:no-underline:hover {
  text-decoration-line: none;
}

.hover\:decoration-accent:hover {
  text-decoration-color: rgb(var(--color-text-accent) / 1);
}

.focus\:outline-none:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
}

.focus\:ring-2:focus {
  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);
  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.focus\:ring-accent:focus {
  --tw-ring-opacity: 1;
  --tw-ring-color: rgb(var(--color-text-accent) / var(--tw-ring-opacity));
}

.group:hover .group-hover\:text-accent {
  --tw-text-opacity: 1;
  color: rgb(var(--color-text-accent) / var(--tw-text-opacity));
}

.prose-headings\:font-bold :is(:where(h1, h2, h3, h4, h5, h6, th):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  font-weight: 700;
}

.prose-headings\:uppercase :is(:where(h1, h2, h3, h4, h5, h6, th):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  text-transform: uppercase;
}

.prose-headings\:text-regular :is(:where(h1, h2, h3, h4, h5, h6, th):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  --tw-text-opacity: 1;
  color: rgb(var(--color-text-regular) / var(--tw-text-opacity));
}

.prose-h2\:text-xl :is(:where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  font-size: 1.25rem;
  line-height: 1.75rem;
}

.prose-h3\:text-lg :is(:where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  font-size: 1.125rem;
  line-height: 1.75rem;
}

.prose-h4\:text-base :is(:where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  font-size: 1rem;
  line-height: 1.5rem;
}

.prose-p\:text-regular :is(:where(p):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  --tw-text-opacity: 1;
  color: rgb(var(--color-text-regular) / var(--tw-text-opacity));
}

.prose-a\:text-muted :is(:where(a):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  --tw-text-opacity: 1;
  color: rgb(var(--color-text-muted) / var(--tw-text-opacity));
}

.hover\:prose-a\:no-underline :is(:where(a):not(:where([class~="not-prose"],[class~="not-prose"] *))):hover {
  text-decoration-line: none;
}

.prose-pre\:bg-tertiary :is(:where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  --tw-bg-opacity: 1;
  background-color: rgb(var(--color-bg-tertiary) / var(--tw-bg-opacity));
}

.prose-li\:text-regular :is(:where(li):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  --tw-text-opacity: 1;
  color: rgb(var(--color-text-regular) / var(--tw-text-opacity));
}

.prose-li\:marker\:text-muted * :is(:where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)))::marker {
  color: rgb(var(--color-text-muted) );
}

.prose-li\:marker\:text-muted :is(:where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)))::marker {
  color: rgb(var(--color-text-muted) );
}

.prose-img\:text-regular :is(:where(img):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  --tw-text-opacity: 1;
  color: rgb(var(--color-text-regular) / var(--tw-text-opacity));
}

@media (min-width: 768px) {
  .md\:inset-y-0 {
    top: 0px;
    bottom: 0px;
  }

  .md\:-right-\[2\.6rem\] {
    right: -2.6rem;
  }

  .md\:left-0 {
    left: 0px;
  }

  .md\:top-\[1\.5rem\] {
    top: 1.5rem;
  }

  .md\:order-first {
    order: -9999;
  }

  .md\:mx-\[1\.5rem\] {
    margin-left: 1.5rem;
    margin-right: 1.5rem;
  }

  .md\:mx-\[3\.5rem\] {
    margin-left: 3.5rem;
    margin-right: 3.5rem;
  }

  .md\:ml-2 {
    margin-left: 0.5rem;
  }

  .md\:ml-8 {
    margin-left: 2rem;
  }

  .md\:mt-24 {
    margin-top: 6rem;
  }

  .md\:block {
    display: block;
  }

  .md\:h-28 {
    height: 7rem;
  }

  .md\:h-5 {
    height: 1.25rem;
  }

  .md\:h-7 {
    height: 1.75rem;
  }

  .md\:w-5 {
    width: 1.25rem;
  }

  .md\:w-7 {
    width: 1.75rem;
  }

  .md\:grid-cols-\[auto_1fr\] {
    grid-template-columns: auto 1fr;
  }

  .md\:flex-row {
    flex-direction: row;
  }

  .md\:gap-6 {
    gap: 1.5rem;
  }

  .md\:place-self-end {
    place-self: end;
  }

  .md\:border-l-\[0\.2rem\] {
    border-left-width: 0.2rem;
  }

  .md\:border-solid {
    border-style: solid;
  }

  .md\:bg-secondary {
    --tw-bg-opacity: 1;
    background-color: rgb(var(--color-bg-secondary) / var(--tw-bg-opacity));
  }

  .md\:bg-transparent {
    background-color: transparent;
  }

  .md\:bg-opacity-50 {
    --tw-bg-opacity: 0.5;
  }

  .md\:stroke-accent {
    stroke: rgb(var(--color-text-accent) / 1);
  }

  .md\:px-0 {
    padding-left: 0px;
    padding-right: 0px;
  }

  .md\:py-0 {
    padding-top: 0px;
    padding-bottom: 0px;
  }

  .md\:pt-7 {
    padding-top: 1.75rem;
  }

  .md\:text-2xl {
    font-size: 1.5rem;
    line-height: 2rem;
  }

  .md\:text-lg {
    font-size: 1.125rem;
    line-height: 1.75rem;
  }

  .md\:text-sm {
    font-size: 0.875rem;
    line-height: 1.25rem;
  }

  .md\:text-xl {
    font-size: 1.25rem;
    line-height: 1.75rem;
  }

  .md\:no-underline {
    text-decoration-line: none;
  }

  .after\:md\:block::after {
    content: var(--tw-content);
    display: block;
  }

  .md\:after\:pl-3::after {
    content: var(--tw-content);
    padding-left: 0.75rem;
  }

  .md\:after\:content-\[\'\|\'\]::after {
    --tw-content: '|';
    content: var(--tw-content);
  }

  .md\:hover\:text-current:hover {
    color: currentColor;
  }
}

@media (min-width: 1024px) {
  .lg\:align-bottom {
    vertical-align: bottom;
  }

  .lg\:align-text-bottom {
    vertical-align: text-bottom;
  }
}

@media (min-width: 1280px) {
  .xl\:relative {
    position: relative;
  }

  .xl\:mx-\[4\.5rem\] {
    margin-left: 4.5rem;
    margin-right: 4.5rem;
  }

  .xl\:block {
    display: block;
  }

  .xl\:hidden {
    display: none;
  }

  .xl\:h-32 {
    height: 8rem;
  }

  .xl\:w-\[20rem\] {
    width: 20rem;
  }

  .xl\:translate-x-0 {
    --tw-translate-x: 0px;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
  }
}

@media (min-width: 1536px) {
  .\32xl\:-right-\[4\.7rem\] {
    right: -4.7rem;
  }

  .\32xl\:top-\[2\.5rem\] {
    top: 2.5rem;
  }

  .\32xl\:mx-\[2\.375rem\] {
    margin-left: 2.375rem;
    margin-right: 2.375rem;
  }

  .\32xl\:mx-\[7rem\] {
    margin-left: 7rem;
    margin-right: 7rem;
  }

  .\32xl\:mb-10 {
    margin-bottom: 2.5rem;
  }

  .\32xl\:mt-12 {
    margin-top: 3rem;
  }

  .\32xl\:mt-14 {
    margin-top: 3.5rem;
  }

  .\32xl\:mt-16 {
    margin-top: 4rem;
  }

  .\32xl\:mt-20 {
    margin-top: 5rem;
  }

  .\32xl\:h-10 {
    height: 2.5rem;
  }

  .\32xl\:h-11 {
    height: 2.75rem;
  }

  .\32xl\:h-40 {
    height: 10rem;
  }

  .\32xl\:h-6 {
    height: 1.5rem;
  }

  .\32xl\:h-7 {
    height: 1.75rem;
  }

  .\32xl\:h-8 {
    height: 2rem;
  }

  .\32xl\:w-10 {
    width: 2.5rem;
  }

  .\32xl\:w-6 {
    width: 1.5rem;
  }

  .\32xl\:w-7 {
    width: 1.75rem;
  }

  .\32xl\:w-8 {
    width: 2rem;
  }

  .\32xl\:w-\[10rem\] {
    width: 10rem;
  }

  .\32xl\:w-\[25rem\] {
    width: 25rem;
  }

  .\32xl\:space-x-2 > :not([hidden]) ~ :not([hidden]) {
    --tw-space-x-reverse: 0;
    margin-right: calc(0.5rem * var(--tw-space-x-reverse));
    margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));
  }

  .\32xl\:py-4 {
    padding-top: 1rem;
    padding-bottom: 1rem;
  }

  .\32xl\:py-7 {
    padding-top: 1.75rem;
    padding-bottom: 1.75rem;
  }

  .\32xl\:pb-3 {
    padding-bottom: 0.75rem;
  }

  .\32xl\:pb-5 {
    padding-bottom: 1.25rem;
  }

  .\32xl\:pr-4 {
    padding-right: 1rem;
  }

  .\32xl\:text-2xl {
    font-size: 1.5rem;
    line-height: 2rem;
  }

  .\32xl\:text-3xl {
    font-size: 1.875rem;
    line-height: 2.25rem;
  }

  .\32xl\:text-lg {
    font-size: 1.125rem;
    line-height: 1.75rem;
  }

  .\32xl\:text-xl {
    font-size: 1.25rem;
    line-height: 1.75rem;
  }

  .prose-h2\:2xl\:text-2xl :is(:where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
    font-size: 1.5rem;
    line-height: 2rem;
  }

  .prose-h3\:2xl\:text-xl :is(:where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
    font-size: 1.25rem;
    line-height: 1.75rem;
  }

  .prose-h4\:2xl\:text-lg :is(:where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
    font-size: 1.125rem;
    line-height: 1.75rem;
  }
}
